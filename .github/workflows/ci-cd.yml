name: CI-CD BlueGreen

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Log in to ACR
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Set image name
        run: |
          IMAGE="${{ secrets.ACR_LOGIN_SERVER }}/myapp:${GITHUB_SHA,,}"
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV

      - name: Build and push Docker image
        run: |
          docker build -t $IMAGE .
          docker push $IMAGE

  trivy-scan:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set image name for scan
        run: |
          IMAGE="${{ secrets.ACR_LOGIN_SERVER }}/myapp:${GITHUB_SHA,,}"
          echo "IMAGE=$IMAGE"
          # Now IMAGE is local to this job
          
      - name: Run Trivy scan via Docker
        run: |
          IMAGE="${{ secrets.ACR_LOGIN_SERVER }}/myapp:${GITHUB_SHA,,}"
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            -v $HOME/.cache/trivy:/root/.cache/trivy \
            ghcr.io/aquasecurity/trivy:0.44.0 image \
            --exit-code 0 --severity HIGH,CRITICAL \
            --username ${{ secrets.ACR_USERNAME }} \
            --password ${{ secrets.ACR_PASSWORD }} \
            --no-progress $IMAGE

  deploy-green:
    runs-on: ubuntu-latest
    needs: trivy-scan
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set image name for deployment
        run: |
          IMAGE="${{ secrets.ACR_LOGIN_SERVER }}/myapp:${GITHUB_SHA,,}"
          echo "IMAGE=$IMAGE"

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set AKS context
        uses: azure/aks-set-context@v2
        with:
          resource-group: ${{ secrets.AKS_RESOURCE_GROUP }}
          cluster-name: ${{ secrets.AKS_CLUSTER }}

      - name: Deploy to green
        run: |
          kubectl set image deployment/myapp-green myapp=$IMAGE
          kubectl rollout status deploy/myapp-green -w

      - name: Get LoadBalancer IP
        id: lb
        run: |
          INGRESS_HOST=$(kubectl get svc myapp-svc -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          echo "INGRESS_HOST=$INGRESS_HOST" >> $GITHUB_ENV
          echo "Ingress host: $INGRESS_HOST"

      - name: Smoke test
        run: |
          curl -f http://$INGRESS_HOST/health || exit 1

      - name: Switch service to green
        run: |
          kubectl patch svc myapp-svc -p "{\"spec\":{\"selector\":{\"app\":\"myapp\",\"version\":\"green\"}}}"
