name: CI-CD BlueGreen

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      IMAGE: ${{ steps.set-image.outputs.IMAGE }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Log in to ACR
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Set image name
        id: set-image
        run: |
          IMAGE="${{ secrets.ACR_LOGIN_SERVER }}/myapp:${GITHUB_SHA}"
          echo "IMAGE=$IMAGE" >> $GITHUB_OUTPUT
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV

      - name: Debug image
        run: echo "Image is ${{ steps.set-image.outputs.IMAGE }}"

      - name: Build and push Docker image
        run: |
          docker build -t ${{ steps.set-image.outputs.IMAGE }} .
          docker push ${{ steps.set-image.outputs.IMAGE }}

  trivy-scan:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Debug trivy IMAGE
        run: echo "Trivy will scan $IMAGE"
        
      - name: Run Trivy scan via Docker
        env:
          IMAGE: ${{ needs.build-and-push.outputs.IMAGE }}
        run: |
          if [ -z "$IMAGE" ]; then
            echo "ERROR: IMAGE is not set"
            exit 1
          fi
          echo "Scanning image $IMAGE"
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            -v $HOME/.cache/trivy:/root/.cache/trivy \
            ghcr.io/aquasecurity/trivy:0.44.0 image \
            --exit-code 1 --severity HIGH,CRITICAL --no-progress $IMAGE

  deploy-green:
    runs-on: ubuntu-latest
    needs: trivy-scan
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set AKS context
        uses: azure/aks-set-context@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          cluster-name: ${{ secrets.AKS_CLUSTER }}
          resource-group: ${{ secrets.AKS_RESOURCE_GROUP }}

      - name: Deploy green version
        run: |
          kubectl apply -f k8s/green-deploy.yaml
          kubectl rollout status deploy/myapp-green -w

      - name: Get LoadBalancer IP
        id: lb
        run: |
          INGRESS_HOST=$(kubectl get svc myapp-svc -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          echo "INGRESS_HOST=$INGRESS_HOST" >> $GITHUB_ENV
          echo "Ingress host: $INGRESS_HOST"

      - name: Smoke test
        run: |
          curl -f http://$INGRESS_HOST/health || exit 1

      - name: Switch service to green
        run: |
          kubectl patch svc myapp-svc -p "{\"spec\":{\"selector\":{\"app\":\"myapp\",\"version\":\"green\"}}}"
